# Licensed under the Apache License, Version 2.0 or the MIT License.
# SPDX-License-Identifier: Apache-2.0 OR MIT
# Copyright Tock Contributors 2022.

[workspace]
members = [
    "arch/cortex-m",
    "arch/cortex-v7m",
    "arch/cortex-m0",
    "arch/cortex-m0p",
    "arch/cortex-m3",
    "arch/cortex-m4",
    "arch/cortex-m7",
    "arch/riscv",
    "arch/rv32i",
    "boards/nano_rp2040_connect",
    "boards/arty_e21",
    "boards/opentitan/earlgrey-cw310",
    "boards/esp32-c3-devkitM-1",
    "boards/cy8cproto_62_4343_w",
    "boards/clue_nrf52840",
    "boards/veer_el2_sim",
    "boards/hail",
    "boards/hifive_inventor",
    "boards/hifive1",
    "boards/imix",
    "boards/imxrt1050-evkb",
    "boards/litex/arty",
    "boards/litex/sim",
    "boards/msp_exp432p401r",
    "boards/microbit_v2",
    "boards/wm1110dev",
    "boards/makepython-nrf52840",
    "boards/nordic/nrf52840dk",
    "boards/nordic/nrf52840_dongle",
    "boards/nordic/nrf52dk",
    "boards/sma_q3",
    "boards/nucleo_f429zi",
    "boards/nucleo_f446re",
    "boards/particle_boron",
    "boards/pico_explorer_base",
    "boards/raspberry_pi_pico",
    "boards/apollo3/redboard_artemis_atp",
    "boards/apollo3/redboard_artemis_nano",
    "boards/apollo3/lora_things_plus",
    "boards/redboard_redv",
    "boards/stm32f3discovery",
    "boards/stm32f412gdiscovery",
    "boards/stm32f429idiscovery",
    "boards/teensy40",
    "boards/nano33ble",
    "boards/nano33ble_rev2",
    "boards/qemu_rv32_virt",
    "boards/weact_f401ccu6/",
    "boards/configurations/nrf52840dk/nrf52840dk-test-appid-sha256",
    "boards/configurations/nrf52840dk/nrf52840dk-test-appid-tbf",
    "boards/configurations/nrf52840dk/nrf52840dk-test-kernel",
    "boards/tutorials/nrf52840dk-hotp-tutorial",
    "boards/tutorials/nrf52840dk-thread-tutorial",
    "capsules/aes_gcm",
    "capsules/core",
    "capsules/extra",
    "capsules/system",
    "chips/apollo3",
    "chips/arty_e21_chip",
    "chips/e310_g002",
    "chips/e310_g003",
    "chips/e310x",
    "chips/earlgrey",
    "chips/esp32",
    "chips/esp32-c3",
    "chips/imxrt10xx",
    "chips/litex",
    "chips/litex_vexriscv",
    "chips/lowrisc",
    "chips/msp432",
    "chips/nrf52",
    "chips/nrf52832",
    "chips/nrf52833",
    "chips/nrf52840",
    "chips/nrf5x",
    "chips/qemu_rv32_virt_chip",
    "chips/psoc62xa",
    "chips/rp2040",
    "chips/sam4l",
    "chips/segger",
    "chips/sifive",
    "chips/stm32f303xc",
    "chips/stm32f401cc",
    "chips/stm32f429zi",
    "chips/stm32f446re",
    "chips/stm32f412g",
    "chips/stm32f4xx",
    "chips/veer_el2",
    "chips/virtio",
    "kernel",
    "libraries/enum_primitive",
    "libraries/riscv-csr",
    "libraries/tock-cells",
    "libraries/tock-register-interface",
    "libraries/tickv",
]
exclude = ["tools/"]
resolver = "2"

[workspace.package]
version = "0.2.3-dev"
authors = ["Tock Project Developers <tock-dev@googlegroups.com>"]
edition = "2021"

[profile.dev]
panic = "abort"
lto = true
opt-level = "z"
debug = true

[profile.release]
panic = "abort"
lto = true
opt-level = "z"
debug = true
codegen-units = 1

# CLIPPY CONFIGURATION
#
# We first disallow all lints in a particular group, then re-allow each one
# Tock does not comply with or we do not want to use.
#
# For each group there are three sections:
# 1. The first section are lints we almost certainly don't want.
# 2. The second section are lints we may not want, we probably have to see the
#    resulting diff.
# 3. The third section are lints that we do want we just need to fixup the code
#    to pass the lint checks.
#
# There are some lints we specifically do not want:
#
# - `clippy::if_same_then_else`: There are often good reasons to enumerate
#   different states that have the same effect.
# - `clippy::manual_unwrap_or_default`: As of Apr 2024, this lint has many false
#   positives.
[workspace.lints.clippy]
restriction = "allow"

if_same_then_else = "allow"
manual_unwrap_or_default = "allow"


# COMPLEXITY LINTS
complexity = { level = "deny", priority = -1 }

too_many_arguments = "allow"
type_complexity = "allow"
option_map_unit_fn = "allow"
nonminimal_bool = "allow"
identity-op = "allow"
while-let-loop = "allow"
manual-range-patterns = "allow"
manual-flatten = "allow"

zero_prefixed_literal = "allow"

# STYLE
style = { level = "deny", priority = -1 }

blocks_in_conditions = "allow"
collapsible_else_if = "allow"
collapsible_if = "allow"
collapsible_match = "allow"
comparison_chain = "allow"
enum-variant-names = "allow"
field-reassign-with-default = "allow"
get_first = "allow"
len_without_is_empty = "allow"
len_zero = "allow"
manual-map = "allow"
manual_range_contains = "allow"
match_like_matches_macro = "allow"
module_inception = "allow"
new-ret-no-self = "allow"
new_without_default = "allow"
redundant_closure = "allow"
result_unit_err = "allow"
single_match = "allow"
upper_case_acronyms = "allow"


declare-interior-mutable-const = "allow"
let_and_return = "allow"
missing_safety_doc = "allow"
needless-range-loop = "allow"
option_map_or_none = "allow"
redundant_pattern_matching = "allow"
unusual-byte-groupings = "allow"
doc_lazy_continuation = "allow"


# PERF
perf = { level = "deny", priority = -1 }

large-enum-variant = "allow"


# CARGO
cargo = { level = "deny", priority = -1 }

cargo_common_metadata = "allow"
negative-feature-names = "allow"


# NURSERY
nursery = { level = "deny", priority = -1 }

use_self = "allow"
option_if_let_else = "allow"
cognitive_complexity = "allow"
or_fun_call = "allow"
collection_is_never_read = "allow"


manual_clamp = "allow"
unused_peekable = "allow"
branches_sharing_code = "allow"


missing_const_for_fn = "allow"
redundant_pub_crate = "allow"
equatable_if_let = "allow"
derive_partial_eq_without_eq = "allow"
empty_line_after_doc_comments = "allow"
trait_duplication_in_bounds = "allow"
useless_let_if_seq = "allow"
as_ptr_cast_mut = "allow"


# PEDANTIC
pedantic = { level = "deny", priority = -1 }

doc_markdown = "allow"
missing_errors_doc = "allow"
if_not_else = "allow"
cast_sign_loss = "allow"
too_many_lines = "allow"
must_use_candidate = "allow"
manual_let_else = "allow"
single_match_else = "allow"
inline_always = "allow"
module_name_repetitions = "allow"
unnested-or-patterns = "allow"
redundant_else = "allow"
return_self_not_must_use = "allow"
match_same_arms = "allow"
explicit_iter_loop = "allow"
similar_names = "allow"
unnecessary_wraps = "allow"
manual_assert = "allow"
transmute_ptr_to_ptr = "allow"
struct_excessive_bools = "allow"
fn_params_excessive_bools = "allow"
trivially_copy_pass_by_ref = "allow"
borrow_as_ptr = "allow"
tuple_array_conversions = "allow"
verbose_bit_mask = "allow"
large_types_passed_by_value = "allow"
no_mangle_with_rust_abi = "allow"
struct_field_names = "allow"
needless_continue = "allow"


cast_lossless = "allow"
cast_possible_truncation = "allow"
cast_precision_loss = "allow"
range_plus_one = "allow"
missing_panics_doc = "allow"
match_wildcard_for_single_variants = "allow"
unused_self = "allow"
cast-possible-wrap = "allow"
uninlined_format_args = "allow"
unreadable_literal = "allow"
needless_pass_by_value = "allow"
items_after_statements = "allow"
ref_option_ref = "allow"
match_bool = "allow"
redundant_closure_for_method_calls = "allow"
no_effect_underscore_binding = "allow"
iter_without_into_iter = "allow"


semicolon_if_nothing_returned = "allow"
ptr_as_ptr = "allow"
ptr_cast_constness = "allow"
mut_mut = "allow"
cast_ptr_alignment = "allow"
used_underscore_binding = "allow"
checked_conversions = "allow"

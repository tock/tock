# Licensed under the Apache License, Version 2.0 or the MIT License.
# SPDX-License-Identifier: Apache-2.0 OR MIT
# Copyright Tock Contributors 2022.

# Force the Shell to be bash as some systems have strange default shells
SHELL := bash

# Remove built-in rules and variables
# n.b. no-op for make --version < 4.0
MAKEFLAGS += -r
MAKEFLAGS += -R

# The absolute path of the directory containing this `Makefile.common` file.
MAKEFILE_COMMON_PATH := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))

# The absolute path of Tock's root directory.
# This is currently the parent directory of MAKEFILE_COMMON_PATH.
TOCK_ROOT_DIRECTORY := $(dir $(abspath $(MAKEFILE_COMMON_PATH)))

# The path to the root of the rust installation used for this build.
# Useful for finding already-installed llvm tools.
RUSTC_SYSROOT := "$(shell rustc --print sysroot)"

# Common defaults that specific boards can override, but likely do not need to.
#
# The TOOLCHAIN parameter is set to the magic value "llvm-tools", which will
# cause the Makefile to resolve the llvm toolchain installed as part of the
# rustup component "llvm-tools". In case a system toolchain shall be used, this
# can be overridden to specify the toolchain prefix, e.g. "llvm" for
# llvm-{objdump,objcopy,...} or "arm-none-eabi".
TOOLCHAIN ?= llvm-tools
CARGO     ?= cargo

# Not all platforms support the rustup tool. Those that do not can pass
# `NO_RUSTUP=1` to make and then all of the rustup commands will be ignored.
ifeq ($(NO_RUSTUP),)
  RUSTUP ?= rustup
else
  RUSTUP ?= true
endif

# Default location of target directory (relative to board makefile).
TARGET_DIRECTORY ?= $(TOCK_ROOT_DIRECTORY)target/

# http://stackoverflow.com/questions/10858261/abort-makefile-if-variable-not-set
# Check that given variables are set and all have non-empty values, print an
# error otherwise.
check_defined = $(strip $(foreach 1,$1,$(if $(value $1),,$(error Undefined variable "$1"))))


# Get the name of the package by hacking the `cargo tree` command. This prints
# the local package name first so we can use that to get the package name. Ex:
#
# wm1110dev v0.1.0 (/Users/bradjc/git/tock/boards/wm1110dev)
# ├── capsules-core v0.1.0 (/Users/bradjc/git/tock/capsules/core)
# │   ├── enum_primitive v0.1.0 (/Users/bradjc/git/tock/libraries/enum_primitive)
PLATFORM := $(firstword $(shell $(CARGO) tree))
# Set `TARGET` if not already defined. Note: this only works on nightly.
ifeq ($(TARGET),)
  # Get the specified target using the unstable `cargo config get` command.
  TARGET_QUOTES := $(shell $(CARGO) config get --format json-value build.target)
  # Remove the quotes from around the target name.
  TARGET := $(patsubst "%",%,$(TARGET_QUOTES))
endif


# Check that we know the basics of what we are compiling for.
# - `PLATFORM`: The name of the board that the kernel is being compiled for.
# - `TARGET`  : The Rust target architecture the kernel is being compiled for.
$(call check_defined, PLATFORM)
$(call check_defined, TARGET)

# Location of target-specific build.
TARGET_PATH := $(TARGET_DIRECTORY)$(TARGET)

# If environment variable V or VERBOSE is non-empty, be verbose.
ifneq ($(V),)
  VERBOSE_MODE = 1
else ifneq ($(VERBOSE),)
  VERBOSE_MODE = 1
else
  VERBOSE_MODE =
endif

ifeq ($(VERBOSE_MODE),1)
  Q =
  VERBOSE_FLAGS = --verbose
  DEVNULL =
else
  Q = @
  VERBOSE_FLAGS =
  DEVNULL = > /dev/null
endif

# Ask git what version of the Tock kernel we are compiling, so we can include
# this within the binary. If Tock is not within a git repo then we fallback to
# a set string which should be updated with every release.
export TOCK_KERNEL_VERSION := $(shell git describe --tags --always 2> /dev/null || echo "2.2+")

# Allow users to opt out of using rustup.
ifeq ($(NO_RUSTUP),)
# Validate that rustup exists.
RUSTUP_ERROR := $(shell $(RUSTUP) --version > /dev/null 2>&1; echo $$?)
ifneq ($(RUSTUP_ERROR),0)
  $(info Error! rustup not found.)
  $(info Please follow the instructions at https://rustup.rs/ to install rustup.)
  $(info Alternatively, install all required tools and Rust targets and set NO_RUSTUP=1 to disable this check.)
  $(info )
  $(error Rustup required to build Tock.)
endif

# Validate that rustup is new enough.
MINIMUM_RUSTUP_VERSION := 1.23.0
RUSTUP_VERSION := $(strip $(word 2, $(shell $(RUSTUP) --version 2> /dev/null)))
# Check that the semver script exists.
ifneq (,$(wildcard $(TOCK_ROOT_DIRECTORY)tools/semver.sh))
ifeq ($(shell $(TOCK_ROOT_DIRECTORY)tools/semver.sh $(RUSTUP_VERSION) \< $(MINIMUM_RUSTUP_VERSION)), true)
  $(warning Required tool `$(RUSTUP)` is out-of-date.)
  $(warning Running `$(RUSTUP) update` in 3 seconds (ctrl-c to cancel))
  $(shell sleep 3)
  DUMMY := $(shell $(RUSTUP) update)
endif
endif

# Verify that various required Rust components are installed. All of these steps
# only have to be done once per Rust version, but will take some time when
# compiling for the first time.
ifneq ($(shell $(RUSTUP) target list | grep "$(TARGET) (installed)"),$(TARGET) (installed))
  $(warning Request to compile for a missing TARGET, make will install in 5s)
  $(warning Consider updating 'targets' in 'rust-toolchain.toml')
  $(shell sleep 5)
  $(shell $(RUSTUP) target add $(TARGET))
endif

# If the board the user is compiling is using the stable toolchain, verify that
# the user's stable rustc toolchain is new enough to compile the board. If the
# toolchain is too old, wait 5 seconds and then install for the user.
ifneq ($(shell $(RUSTUP) show active-toolchain | grep "stable"),)
  # If the error from running --version shows a version mismatch we know the
  # installed toolchain is too old.
  ifneq ($(shell $(CARGO) rustc -- --version 2>&1 | grep "is not supported by the following packages"),)
    $(warning Your stable rustc is older than the MSRV of this board)
    $(warning make will update your stable rustc in 5s)
    $(shell sleep 5)
    DUMMY := $(shell $(RUSTUP) update)
  endif
endif
endif # $(NO_RUSTUP)

# If the user is using the standard toolchain provided as part of the llvm-tools
# rustup component we need to get the full path. rustup should take care of this
# for us by putting in a proxy in .cargo/bin, but until that is setup we
# workaround it.
ifeq ($(TOOLCHAIN),llvm-tools)
  TOOLCHAIN = "$(shell dirname $(shell find $(RUSTC_SYSROOT) -name llvm-size))/llvm"
endif

# Set variables of the key tools we need to compile a Tock kernel. Need to do
# this after we handle if we are using the LLVM tools or not.
SIZE    ?= $(TOOLCHAIN)-size
OBJCOPY ?= $(TOOLCHAIN)-objcopy
OBJDUMP ?= $(TOOLCHAIN)-objdump

# Set additional flags to produce binary from .elf.
#
# - `--strip-sections`: Prevents enormous binaries when SRAM is below flash.
# - `--strip-all`: Remove non-allocated sections outside segments.
#   `.gnu.warning*` and `.ARM.attribute` sections are not removed.
# - `--remove-section .apps`: Prevents the .apps section from being included in
#   the kernel binary file. This section is a placeholder for optionally
#   including application binaries, and only needs to exist in the .elf. By
#   removing it, we prevent the kernel binary from overwriting applications.
OBJCOPY_FLAGS ?= --strip-sections --strip-all --remove-section .apps

# Set the default flags we need for objdump to get a .lst file.
OBJDUMP_FLAGS ?= --disassemble-all --source --section-headers --demangle

# Set default flags for size.
SIZE_FLAGS ?=

# Need an extra flag for OBJDUMP if we are on a thumb platform.
ifneq (,$(findstring thumb,$(TARGET)))
  OBJDUMP_FLAGS += --arch-name=thumb
endif

# Additional flags that can be passed to print_tock_memory_usage.py via an
# environment variable. By default, pass an empty string.
PTMU_ARGS ?=

# Check whether the system already has a sha256sum or shasum application
# present. If not, use the custom shipped one.
ifeq (, $(shell sha256sum --version 2>/dev/null))
  ifeq (, $(shell shasum --version 2>/dev/null))
    # No system sha256sum available.
    SHA256SUM := $(CARGO) run --manifest-path $(TOCK_ROOT_DIRECTORY)tools/sha256sum/Cargo.toml -- 2>/dev/null
  else
    # Use shasum found on MacOS.
    SHA256SUM := shasum -a 256
  endif
else
  # Use system sha256sum.
  SHA256SUM := sha256sum
endif

# Dump configuration for verbose builds
ifeq ($(VERBOSE_MODE),1)
RUST_FLAGS = $(shell $(CARGO) -Zunstable-options config get build.rustflags --format json-value 2> /dev/null || echo "Listing Rust flags only accessible on nightly cargo")
  $(info )
  $(info *******************************************************)
  $(info TOCK KERNEL BUILD SYSTEM -- VERBOSE BUILD CONFIGURATION)
  $(info *******************************************************)
  $(info MAKEFILE_COMMON_PATH          = $(MAKEFILE_COMMON_PATH))
  $(info TOCK_ROOT_DIRECTORY           = $(TOCK_ROOT_DIRECTORY))
  $(info TARGET_DIRECTORY              = $(TARGET_DIRECTORY))
  $(info )
  $(info PLATFORM                      = $(PLATFORM))
  $(info TARGET                        = $(TARGET))
  $(info TOCK_KERNEL_VERSION           = $(TOCK_KERNEL_VERSION))
  $(info RUSTFLAGS                     = $(RUST_FLAGS))
  $(info MAKEFLAGS                     = $(MAKEFLAGS))
  $(info OBJDUMP_FLAGS                 = $(OBJDUMP_FLAGS))
  $(info OBJCOPY_FLAGS                 = $(OBJCOPY_FLAGS))
  $(info SIZE_FLAGS                    = $(SIZE_FLAGS))
  $(info )
  $(info TOOLCHAIN                     = $(TOOLCHAIN))
  $(info SIZE                          = $(SIZE))
  $(info OBJCOPY                       = $(OBJCOPY))
  $(info OBJDUMP                       = $(OBJDUMP))
  $(info CARGO                         = $(CARGO))
  $(info RUSTUP                        = $(RUSTUP))
  $(info SHA256SUM                     = $(SHA256SUM))
  $(info )
  $(info cargo --version               = $(shell $(CARGO) --version))
  $(info rustc --version               = $(shell rustc --version))
  $(info rustup --version              = $(shell $(RUSTUP) --version 2>/dev/null))
  $(info *******************************************************)
  $(info )
endif

.PRECIOUS: %.elf
# Support rules

# User-facing targets
.PHONY: all
all: release

# `make check` runs the Rust compiler but does not actually output the final
# binary. This makes checking for Rust errors much faster.
.PHONY: check
check:
	$(Q)$(CARGO) check $(VERBOSE_FLAGS)


.PHONY: clean
clean::
	$(Q)$(CARGO) clean $(VERBOSE_FLAGS)

.PHONY: release
release:  $(TARGET_PATH)/release/$(PLATFORM).bin

.PHONY: debug
debug:  $(TARGET_PATH)/debug/$(PLATFORM).bin

.PHONY: debug-lst
debug-lst:  $(TARGET_PATH)/debug/$(PLATFORM).lst

.PHONY: doc
doc:
	$(Q)$(CARGO) --color=always doc $(VERBOSE_FLAGS) --release --package $(PLATFORM)


.PHONY: lst
lst: $(TARGET_PATH)/release/$(PLATFORM).lst

# Helper rule for showing the TARGET used by this board. Useful when building
# the documentation for all boards.
.PHONY: show-target
show-target:
	$(info $(TARGET))

.PHONY: stack-analysis
stack-analysis: $(TARGET_PATH)/release/$(PLATFORM)
	@$ echo $(PLATFORM)
	@$ echo ----------------------
	$(Q)$(TOCK_ROOT_DIRECTORY)/tools/stack_analysis.sh $(TARGET_PATH)/release/$(PLATFORM).elf

# Run the `print_tock_memory_usage.py` script for this board.
.PHONY: memory
memory: $(TARGET_PATH)/release/$(PLATFORM).elf
	$(TOCK_ROOT_DIRECTORY)tools/print_tock_memory_usage.py --objdump $(OBJDUMP) -w $(PTMU_ARGS) $<

# Support rules

# Cargo outputs an elf file (just without a file extension)
%.elf: %
	$(Q)cp $< $@


%.bin: %.elf
	$(Q)$(OBJCOPY) --output-target=binary $(OBJCOPY_FLAGS) $< $@
	$(Q)$(SHA256SUM) $@

%.lst: %.elf
	$(Q)$(OBJDUMP) $(OBJDUMP_FLAGS) $< > $@


$(TOCK_ROOT_DIRECTORY)tools/sha256sum/target/debug/sha256sum:
	$(Q)$(CARGO) build $(VERBOSE_FLAGS) --manifest-path $(TOCK_ROOT_DIRECTORY)tools/sha256sum/Cargo.toml


# Cargo-drivers
# We want to always invoke cargo (yay nested build systems), so these need to
# be phony, which means they can't be pattern rules.

.PHONY: $(TARGET_PATH)/release/$(PLATFORM)
$(TARGET_PATH)/release/$(PLATFORM):
	$(Q)$(CARGO) rustc $(VERBOSE_FLAGS) --bin $(PLATFORM) --release
	$(Q)$(SIZE) $(SIZE_FLAGS) $@

.PHONY: $(TARGET_PATH)/debug/$(PLATFORM)
$(TARGET_PATH)/debug/$(PLATFORM):
	$(Q)$(CARGO) build $(VERBOSE_FLAGS) --bin $(PLATFORM)
	$(Q)$(SIZE) $(SIZE_FLAGS) $@
